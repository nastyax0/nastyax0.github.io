---
layout: default
title: "Welcome to Jekyll!"
date: 2025-04-06 12:26:40 +0530
categories: jekyll update
---

Challenges taken from [pwnable.kr](https://pwnable.kr/play.php)

---

#  Challenge: fd

As the name suggests, this challenge revolves around **file descriptors (fd)** in Linux-based systems.

---

##  Introduction

> **What is a file descriptor?**  
> According to [Wikipedia](https://en.wikipedia.org/wiki/File_descriptor), a file descriptor is an abstract indicator used to access a file or other input/output resource, such as a pipe or network socket.

![fd image](/assets/images/fd.png)

---

##  Description

We're provided with a remote binary that takes one argument, manipulates it to obtain a file descriptor, and attempts to read data from it.

The challenge includes a C source code named fd.c

##  Analysis
```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char buf[32];

int main(int argc, char* argv[], char* envp[]) {
    if(argc < 2) {
        printf("pass argv[1] a number\n");
        return 0;
    }

    int fd = atoi(argv[1]) - 0x1234;
    int len = 0;
    len = read(fd, buf, 32);

    if(!strcmp("LETMEWIN\n", buf)) {
        printf("good job :)\n");
        setregid(getegid(), getegid());
        system("/bin/cat flag");
        exit(0);
    }

    printf("learn about Linux file IO\n");
    return 0;
}
```
Logic:

The program expects a single argument (argv[1]) which it converts to an integer.

It subtracts 0x1234 (hexadecimal) from that integer and uses the result as a file descriptor (fd).

It then attempts to read 32 bytes from the resulting file descriptor.

If the buffer matches "LETMEWIN\n", it prints success and displays the flag.

## Exploit Strategy

We want to send our input through standard input (stdin) which corresponds to file descriptor 0 in Linux.

Reverse the line
int fd = atoi( argv[1] ) - 0x1234
0 = x - 0x1234
x = 0x1235
and calculate decimal values we get 4661

input 4661
then type, LETMEWIN


## Output
